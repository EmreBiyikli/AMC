% Distributed for academic research purposes only.
% See COPYING.txt for details.
% Author: Emre Biyikli (biyikli.emre@gmail.com)

% Run
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Performs a relaxation in order to adjust the bond lengths to the desirable
% value. In doing so, it utilizes a spring potential with first nearest
% neighbor interaction. The run terminates either after 10000 iterations or
% for a residual lower than 1e-6. At the end, final positions are output to the
% output directory by the name "final_position.txt". 
function run_position = Run(damping_factor, bond_length, figure_handle,...
                            my_axis, position)
% Init
size(position)
run_position = position;
atom_num = size(run_position, 1);
cut_off = 1.25 * bond_length;
is_continue = 1;
iteration = 0;
% Iterate
while (is_continue)
  iteration = iteration + 1;
  % Neighbor list
  if (iteration==1 || mod(iteration,100) == 0)
    neighbor_list = Distance(run_position) <= 2 * cut_off;
    neighbor_list = neighbor_list - eye(atom_num);
  end
  % Force
  force = zeros(atom_num, 3);
  min_distance = Inf;
  for i = 1 : atom_num    
    neighbor = find(neighbor_list(i, :));
    vector = bsxfun(@minus, run_position(neighbor, :), run_position(i, :));
    distance = sqrt(sum(vector .^ 2, 2));
    min_distance = min(min_distance, min(distance));    
    neighbor_local = distance <= cut_off;
    vector = vector(neighbor_local, :);
    distance = distance(neighbor_local);
    neighbor = neighbor(neighbor_local);
    atom_force = bsxfun(@times, distance - bond_length, vector);
    force(i, :) = force(i, :) + sum(atom_force, 1);
    force(neighbor, :) = force(neighbor, :) - atom_force;  
  end
  % Displacement
  displacement = damping_factor * force;
  residual = norm(displacement);
  run_position = run_position + displacement;  
  % Stop Criteria
  if (iteration == 10000 || residual < 1e-6)
    is_continue = 0;
  end
  % GUI Init
  if (iteration == 1)
    x_size = 0.10;
    y_size = 0.05;
    x_spacing = 0.02;
    y_spacing = 0.01;
    x_increment = x_size + x_spacing;
    y_increment = y_size + y_spacing;
    origin = [0.68 0.28];
    % "Status"
    uicontrol('Style', 'text',...
              'Units', 'normalized',...
              'Position', [origin(1) origin(2) - 0 * y_increment...
                           x_size y_size],...
              'String', 'Status',...
              'BackgroundColor', get(figure_handle,'color'),...
              'HorizontalAlignment', 'left');  
    % "Iteration"
    uicontrol('Style', 'text',...
              'Units', 'normalized',...
              'Position', [origin(1) origin(2) - 1 * y_increment...
                           x_size y_size],...
              'String', 'Iteration (1e4)',...
              'BackgroundColor', get(figure_handle,'color'),...
              'HorizontalAlignment', 'left'); 
    % "Residual"
    uicontrol('Style', 'text',...
              'Units', 'normalized',...
              'Position', [origin(1) origin(2) - 2 * y_increment...
                           x_size y_size],...
              'String', 'Residual (1e-6)',...
              'BackgroundColor', get(figure_handle,'color'),...
              'HorizontalAlignment', 'left');  
    % "Min distance"
    uicontrol('Style', 'text',...
              'Units', 'normalized',...
              'Position', [origin(1) origin(2) - 3 * y_increment...
                           x_size y_size],...
              'String', 'Min distance',...
              'BackgroundColor', get(figure_handle,'color'),...
              'HorizontalAlignment', 'left');      
  end  
  % GUI Update
  if (iteration == 1 || ~mod(iteration, 20) || ~is_continue)   
    % Status: Running
    uicontrol('Style', 'text',...
              'Units', 'normalized',...
              'Position', [origin(1) + x_increment...
                           origin(2) - 0 * y_increment...
                           x_size y_size],...
              'String', 'Running',...
              'BackgroundColor', get(figure_handle,'color'),...
              'HorizontalAlignment', 'right');  
    % Iteration
    uicontrol('Style', 'text',...
              'Units', 'normalized',...
              'Position', [origin(1) + x_increment...
                           origin(2) - 1 * y_increment...
                           x_size y_size],...
              'String', iteration,...
              'BackgroundColor', get(figure_handle,'color'),...
              'HorizontalAlignment', 'right');    
    % Residual
    uicontrol('Style', 'text',...
              'Units', 'normalized',...
              'Position', [origin(1) + x_increment...
                           origin(2) - 2 * y_increment...
                           x_size y_size],...
              'String', num2str(residual, '%.2e'),...
              'BackgroundColor', get(figure_handle,'color'),...
              'HorizontalAlignment', 'right');
    % Minimum distance
    uicontrol('Style', 'text',...
              'Units', 'normalized',...
              'Position', [origin(1) + x_increment...
                           origin(2) - 3 * y_increment...
                           x_size y_size],...
              'String', num2str(min_distance, '%.2f'),...
              'BackgroundColor', get(figure_handle,'color'),...
              'HorizontalAlignment', 'right');
    % Plot
    plot3(run_position(:, 1), run_position(:, 2), run_position(:, 3), 'k.');
    axis equal; axis(my_axis); view([0 -1 0]);
    xlabel('x'); ylabel('y'); zlabel('z'); drawnow;
  end
end
% GUI Final (Status: Finished)
uicontrol('Style', 'text',...
          'Units', 'normalized',...
          'Position', [origin(1) + x_increment origin(2) - 0 * y_increment...
                       x_size y_size],...
          'String', 'Finished',...
          'BackgroundColor', get(figure_handle,'color'),...
          'HorizontalAlignment', 'right');  
% Output
dlmwrite('../output/final_position.txt', run_position,...
         'delimiter', '\t', 'precision', '%16.8f');
end